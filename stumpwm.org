#+TITLE: ~/dotfiles/stumpwm.org

* stumpwm.org
** What is this?
This is my configuration for StumpWM, a tiling window manager configured using lisp.

* Set up
Set the module dir to the install folder because the =contrib/= folder is provided with the aur package
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (in-package :stumpwm)
  (set-module-dir (pathname-as-directory "/usr/share/stumpwm"))
  (load-module "swm-gaps")
#+END_SRC

Set up =swank= to connect to =slime= in emacs
From http://www.kaashif.co.uk/2015/06/28/hacking-stumpwm-with-common-lisp/index.html
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (ql:quickload "swank")
  (require :swank)
  (swank-loader:init)
  (swank:create-server :port 4004
                       :style swank:*communication-style*
                       :dont-close t)
#+END_SRC
In emacs, use =M-x stumpwm-connect= to launch the repl.

* Functionality
Set up how everything works.
** Prefix
Change the prefix key, I like using super + space.
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (set-prefix-key (kbd "s-SPC"))
#+END_SRC

** Mouse
Set the focus to follow the mouse and use the normal mouse pointer instead of the X that StumpWM defaults to.
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  ;; (setq *mouse-focus-policy* :sloppy)
  (setq *mouse-focus-policy* :click)
  (run-shell-command "xsetroot -cursor_name left_ptr")
#+END_SRC

** Programs
Define commands to start up and switch to programs and set up keys.
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (defcommand firefox () ()
    (run-or-raise "firefox" '(:class "firefox")))
  (define-key *top-map* (kbd "s-f") "firefox")

  ;; stumpwm already defines emacs
  (define-key *top-map* (kbd "s-e") "emacs")

  (defcommand alacritty () ()
    (run-or-raise "alacritty -e tmux" '(:class "Alacritty")))

  (defcommand kitty () ()
    (run-or-raise "kitty" '(:class "kitty")))

  (defcommand terminal () ()
    (kitty))

  (define-key *root-map* (kbd "c") "terminal")
  (define-key *root-map* (kbd "C-c") "terminal")
  (define-key *top-map* (kbd "s-RET") "terminal")
  (define-key *top-map* (kbd "s-c") "terminal")
#+END_SRC

** Action Keys
Set up keys for stumpwm actions
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (define-key *top-map* (kbd "s-d") "exec")
  (define-key *top-map* (kbd "s-F") "fullscreen")
  (define-key *top-map* (kbd "s-w") "windowlist")
  ;; resize
  (define-key *top-map* (kbd "C-s-l") "resize 10 0")
  (define-key *top-map* (kbd "C-s-k") "resize 0 10")
  ;; groups
  (define-key *top-map* (kbd "s-]") "gnext")
  (define-key *top-map* (kbd "s-[") "gprev")
  ;; stump commands 
  (define-key *top-map* (kbd "s-;") "colon")
  (define-key *top-map* (kbd "s-:") "eval")
  (define-key *top-map* (kbd "s-R") "restart-hard")
  ;; gaps
  (define-key *top-map* (kbd "s-g") "toggle-gaps")
  ;; modeline
  (define-key *top-map* (kbd "s-y") "mode-line")

  ;; frames
  (define-key *top-map* (kbd "s-o") "hsplit")
  (define-key *top-map* (kbd "s-u") "vsplit")
  (define-key *top-map* (kbd "s-r") "remove")
#+END_SRC

** Navigation and Movement
Set up keys using vim-like keybindings.
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  ;; navigation
  (define-key *top-map* (kbd "s-TAB") "fnext")
  (define-key *top-map* (kbd "s-h") "move-focus left")
  (define-key *top-map* (kbd "s-j") "move-focus down")
  (define-key *top-map* (kbd "s-k") "move-focus up")
  (define-key *top-map* (kbd "s-l") "move-focus right")
  ;; window movement
  (define-key *top-map* (kbd "s-H") "move-window left")
  (define-key *top-map* (kbd "s-J") "move-window down")
  (define-key *top-map* (kbd "s-K") "move-window up")
  (define-key *top-map* (kbd "s-L") "move-window right")
  (define-key *top-map* (kbd "s-n") "pull-hidden-next")
  (define-key *top-map* (kbd "s-p") "pull-hidden-previous")
  (define-key *top-map* (kbd "s-M") "exchange-direction down")
  (define-key *top-map* (kbd "s-N") "exchange-direction left")
  (define-key *top-map* (kbd "s-<") "exchange-direction up")
  (define-key *top-map* (kbd "s->") "exchange-direction right")
  (define-key *top-map* (kbd "s-!") "gmove 1")
  (define-key *top-map* (kbd "s-@") "gmove 2")
  (define-key *top-map* (kbd "s-#") "gmove 3")
  (define-key *top-map* (kbd "s-$") "gmove 4")
  (define-key *top-map* (kbd "s-%") "gmove 5")
  (define-key *top-map* (kbd "s-^") "gmove 6")
  (define-key *top-map* (kbd "s-&") "gmove 7")
  (define-key *top-map* (kbd "s-*") "gmove 8")
  (define-key *top-map* (kbd "s-(") "gmove 9")
  (define-key *top-map* (kbd "s-)") "gmove 0")
#+END_SRC

** Groups
Set up the initial groups
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  ;;(setf (group-name (car (screen-groups (current-screen)))) "dev")
  (run-commands "grename dev")
#+END_SRC

** Power Menu
Define a custom power menu that lets you shutdown or restart your computer, or quit stumpwm
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (defcommand my-power-menu () ()
    (let ((choice
           (select-from-menu (current-screen) '("shutdown" "restart" "quit") nil 0 nil)))
      (cond ((null choice)
             (throw 'error "Aborted."))
            ((string= choice "shutdown")
             (run-shell-command "poweroff"))
            ((string= choice "restart")
             (run-shell-command "reboot"))
            ((string= choice "quit")
             (quit)))))

  (define-key *top-map* (kbd "s-ESC") "my-power-menu")
#+END_SRC
* Appearance
Set up how everything looks.

** Wallpaper 
Set up the wallpaper

#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (run-shell-command "xsetroot -solid \"#2E3440\"" )
  ;; (run-shell-command "nitrogen --set-scaled ~/wallpapers/cathedralpillars.jpg")
  ;; (run-shell-command "nitrogen --set-centered ~/wallpapers/jerrygarcia_2880x1800.png")
#+END_SRC

** Font
Set up =ttf-fonts=. The =ttf-fonts= module requires =clx-truetype= to work
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (ql:quickload "clx-truetype")
  (load-module "ttf-fonts")
#+END_SRC

Now set the font
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (set-font (make-instance 'xft:font :family "Iosevka" :subfamily "Regular" :size 12))
#+END_SRC

For this to actually load the font, I had to run
#+BEGIN_SRC lisp
  (xft:cache-fonts)
#+END_SRC

To get a list of font families in the cache, run this from the REPL:
#+BEGIN_SRC lisp
  (clx-truetype:get-font-families)
#+END_SRC

To get a list of valid subfamilies for a given font:
#+BEGIN_SRC lisp
  (clx-truetype:get-font-subfamilies "Iosevka")
#+END_SRC

I also like bitmap fonts sometimes, leaving this here in case I ever want to switch back:
#+BEGIN_SRC lisp
  (set-font "-*-cherry-*-*-*-*-13-*-*-*-*-*-*-*")
#+END_SRC

** Color
Using colors based off the =nord= theme

#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (setf *colors*
        '("#2E3440"                       ; black
          "#BF616A"                       ; red
          "#A3BE8C"                       ; green
          "#EBCB8B"                       ; yellow
          "#5E81AC"                       ; blue
          "#B48EAD"                       ; magenta
          "#88C0D0"                       ; cyan
          "#ECEFF4"                       ; white
          "#A3BE8C"                       ; spring-green
          "#D8DEE9"                       ; gray9
          ))

  (update-color-map (current-screen))

  (defparameter *foreground-color* "#ECEFF4")
  (defparameter *background-color* "#2E3440")
  (defparameter *border-color* "#5E81AC")
#+END_SRC
** Message Window
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (setf *message-window-gravity* :center
        ,*input-window-gravity* :center
        ,*window-border-style* :thin
        ,*message-window-padding* 5
        ,*input-window-padding* 5)
  (set-msg-border-width 4)
  (set-fg-color *foreground-color*)
  (set-bg-color *background-color*)
  (set-border-color *border-color*)
#+END_SRC
** Frames and Borders
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (set-frame-outline-width 1)
  (setf *normal-border-width* 2)
  (setf *maxsize-border-width* 4)
  (setf *transient-border-width* 2)
  (set-focus-color *border-color*)
  (set-unfocus-color *background-color*)
#+END_SRC
** COMMENT Modeline Polybar
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (run-shell-command "polybar screen --reload")
#+END_SRC

** Modeline
Official docs: https://stumpwm.github.io/git/stumpwm-git_7.html#Mode_002dline
Mostly stolen from https://github.com/zarkone/stumpwm.d

Refresh every 2 seconds
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (setf *mode-line-timeout* 2)
#+END_SRC

Set up the borders and padding
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (setf *mode-line-border-width* 0)
  (setf *mode-line-pad-y* 5)
  (setf *mode-line-pad-x* 10)
#+END_SRC

Set up the colors.
Colors are =^X= where =X= is the the index of the value in the =colors= list
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (setf *bar-med-color* "^B^8")
  (setf *bar-hi-color* "^B^4")
  (setf *bar-crit-color* "^B^1")
  (setf *hidden-window-color* "^7")
  ;; the foreground is the highlight for the windows too
  (setf *mode-line-background-color* *background-color*)
  (setf *mode-line-foreground-color* *foreground-color*)
#+END_SRC

Set up the group and window format,  this changes how the groups (=%g=) and windows (=%v=) are displayed.
- =%n= is the number
- =%s= is the status, =*= means active, =+= is inactive
- =%t= is the name
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (setf *group-format* " %n%s%t ")
  (setf *window-format* "%m%n:%20t ")
#+END_SRC

Define functions to get time and date using lisp. Using separate functions so I can make the time a different color so it stands out.
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (defun my-time ()
    "Return the time, HH:MM"
    (multiple-value-bind
          (second minute hour day month year day-of-week)
        (get-decoded-time)
      (format nil "~2,'0d:~2,'0d" hour minute)))

  (defun my-date ()
    "Return the date, YYYY-MM-DD"
    (multiple-value-bind
          (second minute hour day month year day-of-week)
        (get-decoded-time)
      (format nil "~4,'0d-~2,'0d-~2,'0d" year month day)))
#+END_SRC

Alternatively, I could use the built in date/time, using =%d= in the =*mode-line-format*=. The =*time-modeline-string*= variable controls how its formatted. It uses the same formatting as the =date= command
#+BEGIN_SRC lisp
  (setf *time-modeline-string* "%Y-%m-%d %I:%M%p")
#+END_SRC

Load modules
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (load-module "cpu")
  (load-module "mem")
  (load-module "net")
#+END_SRC

Now put it all together and set up the actual output:
- Left part:
  - =%h= is the head (monitor) number
  - =%g= is the current group
  - =%h= is the current monitor, or head
  - =%v= lists the windows on the current head, where non-visible windows are colored the =*hidden-window-color*=
- Right part (starts after =^>=):
  - =%l= is network info
  - =%M= is memory info
  - =%C= is cpu info
  - =%d= is the date
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  (setf *screen-mode-line-format*
        (list "^9[%h]^n ^B^8%g^n^b %v"
              "^>"
              "^n^b^9 %l| %M| %C | "
              '(:eval (my-date))
              "^B^6 "
              '(:eval (my-time))))
#+END_SRC

When stumpwm starts, make the modeline appear on the current head
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
  ;; (if (not (head-mode-line (current-head)))
  ;;     (toggle-mode-line (current-screen) (current-head)))
#+END_SRC

*** Polybar
Was testing out polybar, may switch to it in the future. Keeping this here for reference.

This is mostly from https://github.com/lepisma/cfg/blob/master/stumpwm/.stumpwmrc
#+BEGIN_SRC lisp
  (defun polybar-groups ()
    "Return string representation for polybar stumpgroups module"
    (apply #'concatenate 'string
           (mapca
            (lambda (g)
              (let* ((name (group-name g))
                     (n-win (write-to-string (length (group-windows g))))
                     (display-text (concat " " name)))
                (if (eq g (current-group))
                    (concat "%{F#ECEFF4 B#882E3440 u#8A9899 +u}" display-text "[" n-win "] " "%{F- B- u- -u}")
                    (concat "%{F#8A9899}" display-text "[" n-win "] " "%{F-}"))))
            (sort (screen-groups (current-screen)) #'< :key #'group-number))))


  (run-shell-command "polybar screen --reload")

  ;; Update polybar group indicator
  (add-hook *new-window-hook* (lambda (win) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
  (add-hook *destroy-window-hook* (lambda (win) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
  (add-hook *focus-window-hook* (lambda (win lastw) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
  (add-hook *focus-group-hook* (lambda (grp lastg) (run-shell-command "polybar-msg hook stumpwmgroups 1")))
#+END_SRC
** Gaps
Set the gap size
#+BEGIN_SRC lisp :tangle ~/dotfiles/stumpwm/.stumpwm.d/init.lisp
(setf swm-gaps:*inner-gaps-size* 8)
(setf swm-gaps:*outer-gaps-size* 10)
#+END_SRC
* To Do List
** TODO Resize based on window selected
Make resize work based on the direction key pressed,
e.g. if i'm on a window on the right, pressing =c-s-h= should grow the window to the right
** TODO MAYBE use powerline symbols in bar?
#+BEGIN_SRC 



#+END_SRC
** TODO MAYBE use another bar?
lemonbar
polybar
